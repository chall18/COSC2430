//MAIN.CPP

#include <iostream>
using namespace std;
void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
void bubbleSort(int arr[], int n)
{
    for(int i = 0; i < n-1; i++)
    {
        for(int j = 0; j < n-i-1; j++)
        {
            if(arr[j] > arr[j+1])
            {
                swap(&arr[j], &arr[j+1]);
            }
        }
    }

}
int main()
{
    //following along with a mycodeschool video to learn
    //Scan the array from left to right multiple times.
    //While scanning and we're at a particular position, compare that element to the adjacent element at the next position
    //If the element at the current position is > the element at the adjacent position, swap them. If not, move on.
    //After one pass, the largest element in the array will be at its appropriate position. It's bubbled up to the right-most position
    //W/ every pass, the array will be divided into two parts: the sorted part and the unsorted part.
    //With each pass, the largest element in the unsorted half will bubble up to the highest index in the unsorted part.

    //The running time will be the time it takes to run through the nested loops in bubbleSort(), so O(n^2).
    //This is also a slow algorithm. As good as selection sort, but ultimately both are slow.
    //Best case is O(n)
    //Avg case: O(n^2)
    //Worst case: O(n^2)


    int A[6] = {2, 7, 4, 1, 5, 3};
    bubbleSort(A, 6);
    for(int i = 0; i < 6; i++)
    {
        cout << A[i] << " ";
    }
    return 0;
}
