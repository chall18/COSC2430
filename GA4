#include "Player.h"
#include <iostream>
#include <time.h>

static int switchCounter = 0;
using namespace std;

void addPlayer(node*,node*&,node*&);
void makeNewNode(Player,node*&,node*&);
void print(node*, node*);

void main() 
{
    Player lockerRoom[12];
    node *head_DLL = NULL;
    node *tail_DLL = NULL;
    node *head_CLL = NULL;
    node *tail_CLL = NULL;

    srand(time(0));

// =========== CREATING BOTH LISTS ============

// SET STATUS
for (int i = 0; i < 5; i++) 
{
    //cout << "i = " << i << endl;
    //int j = (rand() % 11);
    lockerRoom[i].setStatus('C');
    //cout << lockerRoom[j].getStatus() << endl;
}
cout << "entering 2nd for loop" << endl;

    // CREATE LISTS BASED ON STATUS
    for (int i = 0; i < 12; i++)
    {
        lockerRoom[i].setAge((rand() % (41-18))+18); // [18-41] (rand()%(max-min)) + min
        if (lockerRoom[i].getStatus() == 'C') 
        {
            lockerRoom[i].setNumber(i);
            makeNewNode(lockerRoom[i], head_CLL,tail_CLL);
        }
        else 
        {
            lockerRoom[i].setNumber(i);
            makeNewNode(lockerRoom[i], head_DLL,tail_DLL);
        }
    }
print(head_DLL, head_CLL);

// ======== MANAGE EACH LIST =========

system("pause");
}
void makeNewNode(Player info,node *&head,node *&tail)
{
    node * temp = new node(info); // create new node
    if (info.getStatus() == 'B') 
    { // DLL
        if (head == NULL)
        {
            cout << "BENCH CREATION HEAD" << endl;
            temp->next = NULL;
            temp->prev = NULL;
            head = temp; // both head & tail are same node
            tail = temp;
        }
        else 
        {
            addPlayer(temp,head,tail);
        }
}

if (info.getStatus() == 'C')
{ // CLL
    if(head == NULL)
    {
        cout << "COURT CREATION HEAD" << endl;
        //temp = new node(info);
        temp->next = temp;
        temp->prev = temp;
        head = temp;
        tail = temp;
    }
    else 
    {
        addPlayer(temp,head,tail);
    }
}

}

void addPlayer(node*curr, node *&head, node *&tail) { // add player to either bench or court

if (curr->stats.getStatus() == 'B') { // TO bench
if (switchCounter % 2 == 0) { // @ head
cout << "BENCH CREATION" << endl;
head->prev = curr; // give current HEAD PTR address of new node
curr->prev = NULL; // assign PREV PTR of benched player to NULL ( so it can be a valid NEW HEAD)
curr->next = head; // point CURR to OLD HEAD ( to link )
head = curr; // MAKE NEW HEAD
}
else { // @ tail
cout << "BENCH CREATION" << endl;
tail->next = curr; // make old tail point to newly added node
curr->prev = tail; // set previous of NEW NODE to old tail
curr->next = NULL; // new tail; points to nothing
tail = curr; // set new tail
}
}

if (curr->stats.getStatus() == 'C') 
{ // TO court ( "new tail" )
    cout << "COURT CREATION" << endl;
    tail->next = curr;
    curr->prev = tail;
    curr->next = head;
    head->prev = curr;
    tail = curr;
}
switchCounter++;
}
void Swap(node* oldPlayer, node* benchPlayer)
{

}
void print(node*headDLL, node*headCLL) {

node *temp;
temp = headDLL;

cout << "========DLL=======" << endl;
// DLL
while (temp != NULL) {
cout << "Age: " << temp->stats.getAge() << '\t' << temp->stats.getStatus() << endl;
temp = temp->next;
}

cout << "=======CLL=======" << endl;
// CLL

node *tempCLL;
temp = headCLL->next;

while (temp != headCLL) {
cout << "Age: " << temp->stats.getAge() << '\t' << temp->stats.getStatus() << endl;
temp = temp->next;
}

cout << "Age: " << temp->stats.getAge() << temp->stats.getStatus() << endl;
}
